/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var xmlTotal = (function () {
    var o = function (k, v, o, l) { for (o = o || {}, l = k.length; l--; o[k[l]] = v)
        ; return o; }, $V0 = [1, 13], $V1 = [1, 5], $V2 = [1, 6], $V3 = [1, 8], $V4 = [1, 9], $V5 = [1, 10], $V6 = [1, 11], $V7 = [1, 12], $V8 = [2, 3], $V9 = [1, 15], $Va = [6, 7], $Vb = [2, 17, 18, 19, 21, 22, 62, 63, 64, 65, 66, 67, 69, 70, 71], $Vc = [6, 7, 15, 16], $Vd = [1, 20], $Ve = [1, 21], $Vf = [1, 22], $Vg = [1, 32], $Vh = [1, 38], $Vi = [1, 33], $Vj = [1, 34], $Vk = [1, 35], $Vl = [1, 36], $Vm = [1, 37], $Vn = [1, 39], $Vo = [1, 40], $Vp = [6, 7, 15, 16, 22, 45, 46, 47], $Vq = [1, 50], $Vr = [1, 49], $Vs = [1, 46], $Vt = [1, 45], $Vu = [1, 47], $Vv = [1, 48], $Vw = [1, 52], $Vx = [1, 53], $Vy = [1, 54], $Vz = [1, 55], $VA = [1, 56], $VB = [2, 9], $VC = [1, 68], $VD = [1, 69], $VE = [31, 32], $VF = [1, 81], $VG = [1, 79], $VH = [1, 80], $VI = [1, 82], $VJ = [26, 31, 32], $VK = [2, 26], $VL = [22, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 47], $VM = [31, 32, 35, 36, 37, 38, 39, 40], $VN = [2, 40];
    var parser = { trace: function trace() { },
        yy: {},
        symbols_: { "error": 2, "inicio": 3, "xpath": 4, "inicioaux": 5, "EOF": 6, "SEPARADOR": 7, "simbolo": 8, "produccion": 9, "produccionaux": 10, "aux2": 11, "aux": 12, "aux2_": 13, "ComandosLocales": 14, "SLASH": 15, "SLASH_DOBLE": 16, "PUNTO": 17, "DOBLE_PUNTO": 18, "ARROBA": 19, "simboloaux": 20, "ID": 21, "MULTIPLICACION": 22, "atributos": 23, "COR_IZQUIERDO": 24, "operacion": 25, "COR_DERECHO": 26, "operacion_relacional": 27, "opaux2": 28, "opaux": 29, "opaux2_": 30, "AND": 31, "OR": 32, "operacion_numerica": 33, "operacion_relacionalaux": 34, "IGUAL": 35, "DIFERENTE": 36, "MAYOR": 37, "MENOR": 38, "MAYOR_IGUAL": 39, "MENOR_IGUAL": 40, "valor": 41, "operacion_numericaaux2": 42, "operacion_numericaaux": 43, "operacion_numericaaux2_": 44, "MAS": 45, "MENOS": 46, "DIVISION": 47, "ENTERO": 48, "DECIMAL": 49, "CADENA": 50, "localaux": 51, "LANG": 52, "TEXTO": 53, "PAR_IZQUIERDO": 54, "PAR_DERECHO": 55, "POSICION": 56, "ULTIMO": 57, "NODO": 58, "local": 59, "DOBLE_DOSPUNTOS": 60, "ComandosLocalesaux": 61, "ANCESTOR": 62, "SELF": 63, "ATTRIBUTE": 64, "CHILD": 65, "DESCENDANT": 66, "PRECEDING": 67, "SIBLING": 68, "PARENT": 69, "NAMESPACE": 70, "FOLLOWING": 71, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 6: "EOF", 7: "SEPARADOR", 15: "SLASH", 16: "SLASH_DOBLE", 17: "PUNTO", 18: "DOBLE_PUNTO", 19: "ARROBA", 21: "ID", 22: "MULTIPLICACION", 24: "COR_IZQUIERDO", 26: "COR_DERECHO", 31: "AND", 32: "OR", 35: "IGUAL", 36: "DIFERENTE", 37: "MAYOR", 38: "MENOR", 39: "MAYOR_IGUAL", 40: "MENOR_IGUAL", 45: "MAS", 46: "MENOS", 47: "DIVISION", 48: "ENTERO", 49: "DECIMAL", 50: "CADENA", 52: "LANG", 53: "TEXTO", 54: "PAR_IZQUIERDO", 55: "PAR_DERECHO", 56: "POSICION", 57: "ULTIMO", 58: "NODO", 60: "DOBLE_DOSPUNTOS", 62: "ANCESTOR", 63: "SELF", 64: "ATTRIBUTE", 65: "CHILD", 66: "DESCENDANT", 67: "PRECEDING", 68: "SIBLING", 69: "PARENT", 70: "NAMESPACE", 71: "FOLLOWING" },
        productions_: [0, [3, 3], [5, 3], [5, 0], [4, 2], [4, 1], [9, 2], [11, 3], [13, 3], [13, 0], [12, 1], [12, 1], [8, 1], [8, 1], [10, 1], [10, 1], [10, 2], [10, 1], [10, 1], [10, 1], [10, 2], [10, 2], [23, 3], [25, 2], [28, 2], [30, 2], [30, 0], [29, 2], [29, 2], [27, 2], [34, 2], [34, 2], [34, 2], [34, 2], [34, 2], [34, 2], [34, 0], [33, 2], [42, 2], [44, 2], [44, 0], [43, 2], [43, 2], [43, 2], [43, 2], [41, 1], [41, 1], [41, 1], [41, 1], [41, 2], [41, 1], [41, 1], [51, 1], [51, 3], [51, 3], [51, 3], [51, 3], [20, 1], [20, 1], [20, 1], [14, 3], [61, 1], [61, 1], [59, 1], [59, 5], [59, 1], [59, 1], [59, 1], [59, 5], [59, 1], [59, 3], [59, 1], [59, 1], [59, 1], [59, 1], [59, 3]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
            /* this == yyval */
            var $0 = $$.length - 1;
            switch (yystate) {
                case 21:
                    console.log("error sintactico");
                    break;
                case 45:
                case 46:
                case 47:
                    this.$ = $$[$0];
                    break;
                case 48:
                    this.$ = '\"' + $$[$0] + '\"';
                    break;
            }
        },
        table: [{ 2: $V0, 3: 1, 4: 2, 8: 3, 9: 4, 10: 7, 15: $V1, 16: $V2, 17: $V3, 18: $V4, 19: $V5, 21: $V6, 22: $V7 }, { 1: [3] }, { 5: 14, 6: $V8, 7: $V9 }, { 2: $V0, 9: 16, 10: 7, 17: $V3, 18: $V4, 19: $V5, 21: $V6, 22: $V7 }, o($Va, [2, 5]), o($Vb, [2, 12]), o($Vb, [2, 13]), { 8: 18, 11: 17, 15: $V1, 16: $V2 }, o($Vc, [2, 14]), o($Vc, [2, 15]), o($Vc, [2, 17], { 20: 19, 21: $Vd, 22: $Ve, 52: $Vf }), o($Vc, [2, 18], { 23: 23, 24: [1, 24] }), o($Vc, [2, 19]), { 7: [1, 25] }, { 6: [1, 26] }, { 2: $V0, 4: 27, 8: 3, 9: 4, 10: 7, 15: $V1, 16: $V2, 17: $V3, 18: $V4, 19: $V5, 21: $V6, 22: $V7 }, o($Va, [2, 4]), o($Va, [2, 6]), { 2: $V0, 10: 29, 12: 28, 14: 30, 17: $V3, 18: $V4, 19: $V5, 21: $V6, 22: $V7, 59: 31, 62: $Vg, 63: $Vh, 64: $Vi, 65: $Vj, 66: $Vk, 67: $Vl, 69: $Vm, 70: $Vn, 71: $Vo }, o($Vc, [2, 16]), o($Vp, [2, 57]), o($Vp, [2, 58]), o($Vp, [2, 59]), o($Vc, [2, 20]), { 17: $Vq, 19: $Vr, 21: $Vs, 25: 41, 27: 42, 33: 43, 41: 44, 48: $Vt, 49: $Vu, 50: $Vv, 51: 51, 52: $Vw, 53: $Vx, 56: $Vy, 57: $Vz, 58: $VA }, o($Vc, [2, 21]), { 1: [2, 1] }, { 5: 57, 6: $V8, 7: $V9 }, o($Va, $VB, { 13: 58, 8: 59, 15: $V1, 16: $V2 }), o($Vc, [2, 10]), o($Vc, [2, 11]), { 60: [1, 60] }, { 46: [1, 61], 60: [2, 63] }, { 60: [2, 65] }, { 60: [2, 66] }, { 46: [1, 62], 60: [2, 67] }, { 46: [1, 63], 60: [2, 69] }, { 60: [2, 71] }, { 60: [2, 72] }, { 60: [2, 73] }, { 46: [1, 64], 60: [2, 74] }, { 26: [1, 65] }, { 28: 66, 29: 67, 31: $VC, 32: $VD }, o($VE, [2, 36], { 34: 70, 35: [1, 71], 36: [1, 72], 37: [1, 73], 38: [1, 74], 39: [1, 75], 40: [1, 76] }), { 22: $VF, 42: 77, 43: 78, 45: $VG, 46: $VH, 47: $VI }, o($Vp, [2, 45]), o($Vp, [2, 46]), o($Vp, [2, 47]), o($Vp, [2, 48]), { 20: 83, 21: $Vd, 22: $Ve, 52: $Vf }, o($Vp, [2, 50]), o($Vp, [2, 51]), o($Vp, [2, 52]), { 54: [1, 84] }, { 54: [1, 85] }, { 54: [1, 86] }, { 54: [1, 87] }, { 6: [2, 2] }, o($Va, [2, 7]), { 2: $V0, 10: 29, 12: 88, 14: 30, 17: $V3, 18: $V4, 19: $V5, 21: $V6, 22: $V7, 59: 31, 62: $Vg, 63: $Vh, 64: $Vi, 65: $Vj, 66: $Vk, 67: $Vl, 69: $Vm, 70: $Vn, 71: $Vo }, { 17: $Vq, 19: $Vr, 21: $Vs, 22: [1, 91], 41: 90, 48: $Vt, 49: $Vu, 50: $Vv, 51: 51, 52: $Vw, 53: $Vx, 56: $Vy, 57: $Vz, 58: $VA, 61: 89 }, { 32: [1, 92] }, { 32: [1, 93] }, { 68: [1, 94] }, { 68: [1, 95] }, o($Vc, [2, 22]), o($VJ, [2, 23]), { 26: $VK, 29: 97, 30: 96, 31: $VC, 32: $VD }, { 17: $Vq, 19: $Vr, 21: $Vs, 25: 98, 27: 42, 33: 43, 41: 44, 48: $Vt, 49: $Vu, 50: $Vv, 51: 51, 52: $Vw, 53: $Vx, 56: $Vy, 57: $Vz, 58: $VA }, { 17: $Vq, 19: $Vr, 21: $Vs, 25: 99, 27: 42, 33: 43, 41: 44, 48: $Vt, 49: $Vu, 50: $Vv, 51: 51, 52: $Vw, 53: $Vx, 56: $Vy, 57: $Vz, 58: $VA }, o($VE, [2, 29]), { 17: $Vq, 19: $Vr, 21: $Vs, 33: 100, 41: 44, 48: $Vt, 49: $Vu, 50: $Vv, 51: 51, 52: $Vw, 53: $Vx, 56: $Vy, 57: $Vz, 58: $VA }, { 17: $Vq, 19: $Vr, 21: $Vs, 33: 101, 41: 44, 48: $Vt, 49: $Vu, 50: $Vv, 51: 51, 52: $Vw, 53: $Vx, 56: $Vy, 57: $Vz, 58: $VA }, { 17: $Vq, 19: $Vr, 21: $Vs, 33: 102, 41: 44, 48: $Vt, 49: $Vu, 50: $Vv, 51: 51, 52: $Vw, 53: $Vx, 56: $Vy, 57: $Vz, 58: $VA }, { 17: $Vq, 19: $Vr, 21: $Vs, 33: 103, 41: 44, 48: $Vt, 49: $Vu, 50: $Vv, 51: 51, 52: $Vw, 53: $Vx, 56: $Vy, 57: $Vz, 58: $VA }, { 17: $Vq, 19: $Vr, 21: $Vs, 33: 104, 41: 44, 48: $Vt, 49: $Vu, 50: $Vv, 51: 51, 52: $Vw, 53: $Vx, 56: $Vy, 57: $Vz, 58: $VA }, { 17: $Vq, 19: $Vr, 21: $Vs, 33: 105, 41: 44, 48: $Vt, 49: $Vu, 50: $Vv, 51: 51, 52: $Vw, 53: $Vx, 56: $Vy, 57: $Vz, 58: $VA }, o($VL, [2, 37]), o($VM, $VN, { 44: 106, 43: 107, 22: $VF, 45: $VG, 46: $VH, 47: $VI }), { 17: $Vq, 19: $Vr, 21: $Vs, 33: 108, 41: 44, 48: $Vt, 49: $Vu, 50: $Vv, 51: 51, 52: $Vw, 53: $Vx, 56: $Vy, 57: $Vz, 58: $VA }, { 17: $Vq, 19: $Vr, 21: $Vs, 33: 109, 41: 44, 48: $Vt, 49: $Vu, 50: $Vv, 51: 51, 52: $Vw, 53: $Vx, 56: $Vy, 57: $Vz, 58: $VA }, { 17: $Vq, 19: $Vr, 21: $Vs, 33: 110, 41: 44, 48: $Vt, 49: $Vu, 50: $Vv, 51: 51, 52: $Vw, 53: $Vx, 56: $Vy, 57: $Vz, 58: $VA }, { 17: $Vq, 19: $Vr, 21: $Vs, 33: 111, 41: 44, 48: $Vt, 49: $Vu, 50: $Vv, 51: 51, 52: $Vw, 53: $Vx, 56: $Vy, 57: $Vz, 58: $VA }, o($Vp, [2, 49]), { 55: [1, 112] }, { 55: [1, 113] }, { 55: [1, 114] }, { 55: [1, 115] }, o($Va, $VB, { 8: 59, 13: 116, 15: $V1, 16: $V2 }), o($Vc, [2, 60]), o($Vc, [2, 61]), o($Vc, [2, 62]), { 46: [1, 117] }, { 46: [1, 118] }, { 60: [2, 70] }, { 60: [2, 75] }, o($VJ, [2, 24]), { 26: $VK, 29: 97, 30: 119, 31: $VC, 32: $VD }, o($VJ, [2, 27]), o($VJ, [2, 28]), o($VE, [2, 30]), o($VE, [2, 31]), o($VE, [2, 32]), o($VE, [2, 33]), o($VE, [2, 34]), o($VE, [2, 35]), o($VL, [2, 38]), o($VM, $VN, { 43: 107, 44: 120, 22: $VF, 45: $VG, 46: $VH, 47: $VI }), o($VL, [2, 41]), o($VL, [2, 42]), o($VL, [2, 43]), o($VL, [2, 44]), o($Vp, [2, 53]), o($Vp, [2, 54]), o($Vp, [2, 55]), o($Vp, [2, 56]), o($Va, [2, 8]), { 63: [1, 121] }, { 63: [1, 122] }, o($VJ, [2, 25]), o($VL, [2, 39]), { 60: [2, 64] }, { 60: [2, 68] }],
        defaultActions: { 26: [2, 1], 33: [2, 65], 34: [2, 66], 37: [2, 71], 38: [2, 72], 39: [2, 73], 57: [2, 2], 94: [2, 70], 95: [2, 75], 121: [2, 64], 122: [2, 68] },
        parseError: function parseError(str, hash) {
            if (hash.recoverable) {
                this.trace(str);
            }
            else {
                var error = new Error(str);
                error.hash = hash;
                throw error;
            }
        },
        parse: function parse(input) {
            var self = this, stack = [0], tstack = [], // token stack
            vstack = [null], // semantic value stack
            lstack = [], // location stack
            table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
            var args = lstack.slice.call(arguments, 1);
            //this.reductionCount = this.shiftCount = 0;
            var lexer = Object.create(this.lexer);
            var sharedState = { yy: {} };
            // copy state
            for (var k in this.yy) {
                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                }
            }
            lexer.setInput(input, sharedState.yy);
            sharedState.yy.lexer = lexer;
            sharedState.yy.parser = this;
            if (typeof lexer.yylloc == 'undefined') {
                lexer.yylloc = {};
            }
            var yyloc = lexer.yylloc;
            lstack.push(yyloc);
            var ranges = lexer.options && lexer.options.ranges;
            if (typeof sharedState.yy.parseError === 'function') {
                this.parseError = sharedState.yy.parseError;
            }
            else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            _token_stack: var lex = function () {
                var token;
                token = lexer.lex() || EOF;
                // if token isn't its numeric value, convert
                if (typeof token !== 'number') {
                    token = self.symbols_[token] || token;
                }
                return token;
            };
            var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
            while (true) {
                // retreive state number from top of stack
                state = stack[stack.length - 1];
                // use default actions if available
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                }
                else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    // read action for current state and first input
                    action = table[state] && table[state][symbol];
                }
                _handle_error: 
                // handle parse error
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var error_rule_depth;
                    var errStr = '';
                    // Return the rule stack depth where the nearest error rule can be found.
                    // Return FALSE when no error recovery rule was found.
                    function locateNearestErrorRecoveryRule(state) {
                        var stack_probe = stack.length - 1;
                        var depth = 0;
                        // try to recover from error
                        for (;;) {
                            // check for error recovery rule in this state
                            if ((TERROR.toString()) in table[state]) {
                                return depth;
                            }
                            if (state === 0 || stack_probe < 2) {
                                return false; // No suitable error recovery rule available.
                            }
                            stack_probe -= 2; // popStack(1): [symbol, action]
                            state = stack[stack_probe];
                            ++depth;
                        }
                    }
                    if (!recovering) {
                        // first see if there's any chance at hitting an error recovery rule:
                        error_rule_depth = locateNearestErrorRecoveryRule(state);
                        // Report error
                        expected = [];
                        for (p in table[state]) {
                            if (this.terminals_[p] && p > TERROR) {
                                expected.push("'" + this.terminals_[p] + "'");
                            }
                        }
                        if (lexer.showPosition) {
                            errStr = 'Parse error on line ' + (yylineno + 1) + ":\n" + lexer.showPosition() + "\nExpecting " + expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                        }
                        else {
                            errStr = 'Parse error on line ' + (yylineno + 1) + ": Unexpected " +
                                (symbol == EOF ? "end of input" :
                                    ("'" + (this.terminals_[symbol] || symbol) + "'"));
                        }
                        this.parseError(errStr, {
                            text: lexer.match,
                            token: this.terminals_[symbol] || symbol,
                            line: lexer.yylineno,
                            loc: yyloc,
                            expected: expected,
                            recoverable: (error_rule_depth !== false)
                        });
                    }
                    else if (preErrorSymbol !== EOF) {
                        error_rule_depth = locateNearestErrorRecoveryRule(state);
                    }
                    // just recovered from another error
                    if (recovering == 3) {
                        if (symbol === EOF || preErrorSymbol === EOF) {
                            throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                        }
                        // discard current lookahead and grab another
                        yyleng = lexer.yyleng;
                        yytext = lexer.yytext;
                        yylineno = lexer.yylineno;
                        yyloc = lexer.yylloc;
                        symbol = lex();
                    }
                    // try to recover from error
                    if (error_rule_depth === false) {
                        throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
                    }
                    popStack(error_rule_depth);
                    preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
                    symbol = TERROR; // insert generic error symbol as new lookahead
                    state = stack[stack.length - 1];
                    action = table[state] && table[state][TERROR];
                    recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
                }
                // this shouldn't happen, unless resolve defaults are off
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1: // shift
                        //this.shiftCount++;
                        stack.push(symbol);
                        vstack.push(lexer.yytext);
                        lstack.push(lexer.yylloc);
                        stack.push(action[1]); // push state
                        symbol = null;
                        if (!preErrorSymbol) { // normal execution/no error
                            yyleng = lexer.yyleng;
                            yytext = lexer.yytext;
                            yylineno = lexer.yylineno;
                            yyloc = lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        }
                        else {
                            // error just occurred, resume old lookahead f/ before error
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        // reduce
                        //this.reductionCount++;
                        len = this.productions_[action[1]][1];
                        // perform semantic action
                        yyval.$ = vstack[vstack.length - len]; // default to $$ = $1
                        // default location, uses first token for firsts, last for lasts
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                        }
                        r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        // pop off stack
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]); // push nonterminal (reduce)
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        // goto new state = table[STATE][NONTERMINAL]
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        // accept
                        return true;
                }
            }
            return true;
        } };
    //importaciones y demas    
    /* generated by jison-lex 0.3.4 */
    var lexer = (function () {
        var lexer = ({
            EOF: 1,
            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                }
                else {
                    throw new Error(str);
                }
            },
            // resets the lexer, sets new input
            setInput: function (input, yy) {
                this.yy = yy || this.yy || {};
                this._input = input;
                this._more = this._backtrack = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                };
                if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                }
                this.offset = 0;
                return this;
            },
            // consumes and returns one char from the input
            input: function () {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                }
                else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }
                this._input = this._input.slice(1);
                return ch;
            },
            // unshifts one char (or a string) into the input
            unput: function (ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);
                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);
                if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                }
                var r = this.yylloc.range;
                this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ?
                        (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                            + oldLines[oldLines.length - lines.length].length - lines[0].length :
                        this.yylloc.first_column - len
                };
                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                this.yyleng = this.yytext.length;
                return this;
            },
            // When called from action, caches matched text and appends it on next action
            more: function () {
                this._more = true;
                return this;
            },
            // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject: function () {
                if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                }
                else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
                return this;
            },
            // retain first n characters of the match
            less: function (n) {
                this.unput(this.match.slice(n));
            },
            // displays already matched input, i.e. for error messages
            pastInput: function () {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },
            // displays upcoming input, i.e. for error messages
            upcomingInput: function () {
                var next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },
            // displays the character position where the lexing error occurred, i.e. for error messages
            showPosition: function () {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },
            // test the lexed token: return FALSE when not a match, otherwise return token
            test_match: function (match, indexed_rule) {
                var token, lines, backup;
                if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                        yylineno: this.yylineno,
                        yylloc: {
                            first_line: this.yylloc.first_line,
                            last_line: this.last_line,
                            first_column: this.yylloc.first_column,
                            last_column: this.yylloc.last_column
                        },
                        yytext: this.yytext,
                        match: this.match,
                        matches: this.matches,
                        matched: this.matched,
                        yyleng: this.yyleng,
                        offset: this.offset,
                        _more: this._more,
                        _input: this._input,
                        yy: this.yy,
                        conditionStack: this.conditionStack.slice(0),
                        done: this.done
                    };
                    if (this.options.ranges) {
                        backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                }
                lines = match[0].match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno += lines.length;
                }
                this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ?
                        lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                        this.yylloc.last_column + match[0].length
                };
                this.yytext += match[0];
                this.match += match[0];
                this.matches = match;
                this.yyleng = this.yytext.length;
                if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                }
                this._more = false;
                this._backtrack = false;
                this._input = this._input.slice(match[0].length);
                this.matched += match[0];
                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
                if (this.done && this._input) {
                    this.done = false;
                }
                if (token) {
                    return token;
                }
                else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                        this[k] = backup[k];
                    }
                    return false; // rule action called reject() implying the next rule should be tested instead.
                }
                return false;
            },
            // return next match in input
            next: function () {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) {
                    this.done = true;
                }
                var token, match, tempMatch, index;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (this.options.backtrack_lexer) {
                            token = this.test_match(tempMatch, rules[i]);
                            if (token !== false) {
                                return token;
                            }
                            else if (this._backtrack) {
                                match = false;
                                continue; // rule action called reject() implying a rule MISmatch.
                            }
                            else {
                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                                return false;
                            }
                        }
                        else if (!this.options.flex) {
                            break;
                        }
                    }
                }
                if (match) {
                    token = this.test_match(match, rules[index]);
                    if (token !== false) {
                        return token;
                    }
                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                    return false;
                }
                if (this._input === "") {
                    return this.EOF;
                }
                else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
            },
            // return next match that has a token
            lex: function lex() {
                var r = this.next();
                if (r) {
                    return r;
                }
                else {
                    return this.lex();
                }
            },
            // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },
            // pop the previously active lexer condition state off the condition stack
            popState: function popState() {
                var n = this.conditionStack.length - 1;
                if (n > 0) {
                    return this.conditionStack.pop();
                }
                else {
                    return this.conditionStack[0];
                }
            },
            // produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules: function _currentRules() {
                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                }
                else {
                    return this.conditions["INITIAL"].rules;
                }
            },
            // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState: function topState(n) {
                n = this.conditionStack.length - 1 - Math.abs(n || 0);
                if (n >= 0) {
                    return this.conditionStack[n];
                }
                else {
                    return "INITIAL";
                }
            },
            // alias for begin(condition)
            pushState: function pushState(condition) {
                this.begin(condition);
            },
            // return the number of states currently on the stack
            stateStackSize: function stateStackSize() {
                return this.conditionStack.length;
            },
            options: { "case-insensitive": true },
            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                var YYSTATE = YY_START;
                switch ($avoiding_name_collisions) {
                    case 0:
                        break;
                    case 1:
                        return 38;
                        break;
                    case 2:
                        return 37;
                        break;
                    case 3:
                        return 16;
                        break;
                    case 4:
                        return 15;
                        break;
                    case 5:
                        return 35;
                        break;
                    case 6:
                        return 7;
                        break;
                    case 7:
                        return 45;
                        break;
                    case 8:
                        return 46;
                        break;
                    case 9:
                        return 22;
                        break;
                    case 10:
                        return 47;
                        break;
                    case 11:
                        return 36;
                        break;
                    case 12:
                        return 39;
                        break;
                    case 13:
                        return 40;
                        break;
                    case 14:
                        return 31;
                        break;
                    case 15:
                        return 32;
                        break;
                    case 16:
                        return 'MODULAR';
                        break;
                    case 17:
                        return 19;
                        break;
                    case 18:
                        return 17;
                        break;
                    case 19:
                        return 18;
                        break;
                    case 20:
                        return 60;
                        break;
                    case 21:
                        return 24;
                        break;
                    case 22:
                        return 26;
                        break;
                    case 23:
                        return 54;
                        break;
                    case 24:
                        return 55;
                        break;
                    case 25:
                        return 62;
                        break;
                    case 26:
                        return 64;
                        break;
                    case 27:
                        return 65;
                        break;
                    case 28:
                        return 66;
                        break;
                    case 29:
                        return 71;
                        break;
                    case 30:
                        return "NAMESPACE";
                        break;
                    case 31:
                        return 69;
                        break;
                    case 32:
                        return 67;
                        break;
                    case 33:
                        return 63;
                        break;
                    case 34:
                        return 'SILBLING';
                        break;
                    case 35:
                        return 58;
                        break;
                    case 36:
                        return 52;
                        break;
                    case 37:
                        return 56;
                        break;
                    case 38:
                        return 57;
                        break;
                    case 39:
                        return 53;
                        break;
                    case 40:
                        yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2);
                        return 50;
                        break;
                    case 41:
                        return 49;
                        break;
                    case 42:
                        return 48;
                        break;
                    case 43:
                        return 21;
                        break;
                    case 44:
                        return 6;
                        break;
                    case 45:
                        console.log(yy_.yytext, "ErroreLexico");
                        break;
                }
            },
            rules: [/^(?:[\s]+)/i, /^(?:<)/i, /^(?:>)/i, /^(?:\/\/)/i, /^(?:\/)/i, /^(?:=)/i, /^(?:\|)/i, /^(?:\+)/i, /^(?:-)/i, /^(?:\*)/i, /^(?:div\b)/i, /^(?:!=)/i, /^(?:>=)/i, /^(?:<=)/i, /^(?:and\b)/i, /^(?:or\b)/i, /^(?:mod\b)/i, /^(?:@)/i, /^(?:\.)/i, /^(?:\.\.)/i, /^(?:::)/i, /^(?:\[)/i, /^(?:\])/i, /^(?:\()/i, /^(?:\))/i, /^(?:ancestor\b)/i, /^(?:attribute\b)/i, /^(?:child\b)/i, /^(?:descendant\b)/i, /^(?:following\b)/i, /^(?:namespace\b)/i, /^(?:parent\b)/i, /^(?:preceding\b)/i, /^(?:self\b)/i, /^(?:silbling\b)/i, /^(?:node\b)/i, /^(?:lang\b)/i, /^(?:position\b)/i, /^(?:last\b)/i, /^(?:text\b)/i, /^(?:'[^\']*')/i, /^(?:[0-9]+(\.[0-9]+)?\b)/i, /^(?:[0-9]+\b)/i, /^(?:[a-zA-Z_][a-zA-Z0-9_]*)/i, /^(?:$)/i, /^(?:.)/i],
            conditions: { "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], "inclusive": true } }
        });
        return lexer;
    })();
    parser.lexer = lexer;
    function Parser() {
        this.yy = {};
    }
    Parser.prototype = parser;
    parser.Parser = Parser;
    return new Parser;
})();
if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = xmlTotal;
    exports.Parser = xmlTotal.Parser;
    exports.parse = function () { return xmlTotal.parse.apply(xmlTotal, arguments); };
    exports.main = function commonjsMain(args) {
        if (!args[1]) {
            console.log('Usage: ' + args[0] + ' FILE');
            process.exit(1);
        }
        var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
        return exports.parser.parse(source);
    };
    if (typeof module !== 'undefined' && require.main === module) {
        exports.main(process.argv.slice(1));
    }
}
